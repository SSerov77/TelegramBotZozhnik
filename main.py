from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from config import TOKEN
import sqlite3
from time import sleep
import os
from random import choice
from bot_fiels import keyboard_markup as kb
from aiogram.types import ReplyKeyboardMarkup

from config import TOKEN
from bot_fiels import keyboard_markup as kb
from random import choice
from bot_fiels.weather import Weather

user_data = {}
exercises = ['–ü—Ä—ã–∂–∫–∏', '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏–µ —É —Å—Ç–µ–Ω—ã', '–û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞', '–ü–æ–¥—ä–µ–º—ã –Ω–∞ —Å—Ç—É–ª', '–ù–∞–∫–ª–æ–Ω –≤–ø–µ—Ä–µ–¥ –∏–∑ –ø–æ–ª–æ–∂–µ–Ω–∏—è –ª–µ–∂–∞',
             '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è', '–ë–µ–≥, –∫–æ–ª–µ–Ω–∏ –≤–≤–µ—Ä—Ö',
             '–í—ã–ø–∞–¥—ã', '–û—Ç–∂–∏–º–∞–Ω–∏—è —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º', '–ë–æ–∫–æ–≤–∞—è –ø–ª–∞–Ω–∫–∞', '–û–±—Ä–∞—Ç–Ω—ã–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç —Å—Ç—É–ª–∞', '–ü–ª–∞–Ω–∫–∞']
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
connection = sqlite3.connect('BotZozhnik.db')
cur = connection.cursor()

help_text = '–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?' \
            '\n‚ùó–ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É \start' \
            '\n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –Ω—É–∂–Ω—ã—Ö —Ç–µ–±–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤' \
            '\n‚úÖ–†–∞–∑–¥–µ–ª "–í–∞—à–µ –ø–∏—Ç–∞–Ω–∏–µ" –ø–æ–¥—Å–∫–∞–∂–µ—Ç —Ç–µ–±–µ –Ω—É–∂–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω —á—Ç–æ–±—ã –ø–æ—Ö—É–¥–µ—Ç—å, –Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –µ—ë' \
            '\n‚úÖ–†–∞–∑–¥–µ–ª "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏" –ø–æ–¥—Å–∫–∞–∂–µ—Ç —Ç–µ–±–µ –±—ã—Å—Ç—Ä—ã–µ –∏ —É–¥–æ–±–Ω—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å' \
            '\n‚úÖ–í —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è" —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–∏ —É—Å–ø–µ—Ö–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–µ–±—è' \
            '\n‚úÖ–í —Ä–∞–∑–¥–µ–ª–µ "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –∏ –±–æ—Ç —Ç–µ–±–µ —ç—Ç–æ –ø—Ä–∏—à–ª—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ ,—á—Ç–æ–±—ã —Ç—ã –Ω–µ –∑–∞–±—ã–ª –æ–± —ç—Ç–æ–º' \
            '\nüîÖ–ù–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–≥–¥–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏' \
            '\n‚úÖ–í "–î—Ä—É–≥–æ–µ" —Ç—ã –Ω–∞–π–¥–µ—à—å –µ—â–µ –º–Ω–æ–≥–æ —á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ:)'


def get_keyboard():
    buttons = [
        types.InlineKeyboardButton(text="<<", callback_data="back"),
        types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
        types.InlineKeyboardButton(text=">>", callback_data="next")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    keyboard.add(*buttons)
    return keyboard


@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    if not cur.execute(f'''select chat_id From users
                        where chat_id = '{message.chat.id}' ''').fetchall():
        cur.execute("INSERT INTO users(chat_id, name, weight, city, mailing, completion_notification)"
                    "VALUES(?, ?, ?, ?, ?, ?)",
                    (message.chat.id, str(message.from_user.first_name), None, None, 'False', 'True'))
        connection.commit()
    await bot.send_message(message.from_user.id,
                           f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –Ω–∞–ø–∏—à–∏ \help',
                           reply_markup=kb.mainMenu)


@dp.message_handler(commands=['help'])
async def command_start(message: types.Message):
    await bot.send_message(message.from_user.id, help_text, reply_markup=kb.mainMenu)


@dp.message_handler(commands=['choicecity'])
async def command_start(message: types.Message):
    try:
        new_city = message.get_args()
        cur.execute(f"UPDATE users SET city='{new_city}' "
                    f"WHERE chat_id={message.from_user.id}")
        connection.commit()
    except:
        await bot.send_message(message.from_user.id, '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å')
    else:
        await bot.send_message(message.from_user.id, f'–í–∞—à –≥–æ—Ä–æ–¥ –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {new_city}')


@dp.message_handler(commands=['stop'])
async def command_start(message: types.Message):
    btn = types.InlineKeyboardButton(text="–î–ê!", callback_data="stop")
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(btn)
    await bot.send_message(message.from_user.id, f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞?', reply_markup=keyboard)


@dp.message_handler(commands=['settings'])
async def command_start(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
                           reply_markup=kb.settingsMenu)


@dp.message_handler(text=['–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
async def nutrition_kb(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.mainMenu)


@dp.message_handler(text=['–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ'])
async def main_menu_kb(message: types.Message):
    await bot.send_message(message.from_user.id, '–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ', reply_markup=kb.purposeMenu)


@dp.message_handler(text=['–ù–∞–∑–∞–¥ –≤ "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ"'])
async def nutrition_kb(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—ã –≤–µ—Ä–Ω—É—Å—å –≤ "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ"',
                           reply_markup=kb.purposeMenu)


@dp.message_handler(text=['–î—Ä—É–≥–æ–µ'])
async def other_kb(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ "–î—Ä—É–≥–æ–µ"', reply_markup=kb.otherMenu)


@dp.message_handler(text=['–ù–∞–∑–∞–¥ –≤ "–î—Ä—É–≥–æ–µ"'])
async def back_to_other_kb(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ "–î—Ä—É–≥–æ–µ"', reply_markup=kb.otherMenu)


@dp.message_handler(text=['–ü–æ–≥–æ–¥–∞'])
async def weather_kb(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ "–ü–æ–≥–æ–¥–∞"', reply_markup=kb.weatherMenu)


@dp.message_handler(text=['–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É'])
async def weather_kb(message: types.Message):
    res = Weather(str(message.chat.id)).result
    if res:
        await bot.send_message(message.from_user.id, res, reply_markup=kb.weatherMenu)
    else:
        await bot.send_message(message.from_user.id, f'–í—ã –Ω–µ –≤–≤–µ–ª–∏ –≥–æ—Ä–æ–¥', reply_markup=kb.weatherMenu)


@dp.message_handler(text=['–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'])
async def back_to_other_kb(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"', reply_markup=kb.notifyMenu)


@dp.message_handler(text='–ú–æ—Ç–∏–≤–∞—Ü–∏—è')
async def quotes(message: types.Message):
    f = open("quotes.txt", 'r', encoding="utf8")
    data = f.readlines()
    await bot.send_message(message.from_user.id, str(choice(data)), reply_markup=kb.otherMenu)
    f.close()


@dp.message_handler(text='–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã')
async def quotes(message: types.Message):
    f = open("facts.txt", 'r', encoding="utf8")
    data = f.readlines()
    await bot.send_message(message.from_user.id, str(choice(data)), reply_markup=kb.otherMenu)
    f.close()


@dp.message_handler(text=['–ü–æ–º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥'])
async def weather_kb(message: types.Message):
    await bot.send_message(message.from_user.id, '–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –≤–≤–µ–¥–∏—Ç–µ "/choicecity <<–í–∞—à –≥–æ—Ä–æ–¥>>"',
                           reply_markup=kb.weatherMenu)


@dp.message_handler(text='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã')
async def notification_weather(message: types.Message):
    btn = types.InlineKeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å", callback_data="notification_weather_on")
    btn1 = types.InlineKeyboardButton(text="–í—ã–∫–ª—é—á–∏—Ç—å", callback_data="notification_weather_off")
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(btn, btn1)
    await bot.send_message(message.from_user.id, f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã', reply_markup=keyboard)


@dp.message_handler(text='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞')
async def notification_completion(message: types.Message):
    btn = types.InlineKeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å", callback_data="notification_completion_on")
    btn1 = types.InlineKeyboardButton(text="–í—ã–∫–ª—é—á–∏—Ç—å", callback_data="notification_completion_off")
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(btn, btn1)
    await bot.send_message(message.from_user.id, f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞', reply_markup=keyboard)


@dp.message_handler(text='–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏')
async def workout(message: types.Message):
    await bot.send_message(message.from_user.id,
                           '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö',
                           reply_markup=kb.exerciseMenu)


@dp.message_handler(text='–í—ã–±—Ä–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ')
async def choice_exercise(message: types.Message):
    user_data[message.from_user.id] = 0
    await bot.send_message(message.from_user.id, f'–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {exercises[user_data[message.from_user.id]]}',
                           reply_markup=get_keyboard())


@dp.message_handler(text='–°–ª—É—á–∞–π–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ')
async def random_exercise(message: types.Message):
    exercise = choice(exercises)
    f = open("exercises.txt", 'r', encoding='utf8')
    data = f.readlines()
    f.close()
    await bot.send_message(message.from_user.id, f'–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {exercise}\n{data[exercises.index(exercise)]}')


@dp.message_handler(text='–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É')
async def workout_start(message: types.Message):
    btn = types.InlineKeyboardButton(text="–î–ê!", callback_data="yes")
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(btn)
    await bot.send_message(message.from_user.id, f'–ù–∞—á–∏–Ω–∞–µ–º?', reply_markup=keyboard)


@dp.callback_query_handler(text='notification_completion_on')
async def notification_completion_on(call: types.CallbackQuery):
    await call.message.edit_text('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã')
    cur.execute(f"UPDATE users SET completion_notification='True' "
                f"WHERE chat_id={call.from_user.id}")
    connection.commit()


@dp.callback_query_handler(text='notification_completion_off')
async def notification_completion_off(call: types.CallbackQuery):
    await call.message.edit_text('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –±—ã–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã')
    cur.execute(f"UPDATE users SET completion_notification='False' "
                f"WHERE chat_id={call.from_user.id}")
    connection.commit()


@dp.callback_query_handler(text='notification_weather_on')
async def notification_weather_on(call: types.CallbackQuery):
    await call.message.edit_text('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã')
    cur.execute(f"UPDATE users SET mailing='True' "
                f"WHERE chat_id={call.from_user.id}")
    connection.commit()


@dp.callback_query_handler(text='notification_weather_off')
async def notification_weather_off(call: types.CallbackQuery):
    await call.message.edit_text('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –±—ã–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã')
    cur.execute(f"UPDATE users SET mailing='False' "
                f"WHERE chat_id={call.from_user.id}")
    connection.commit()


@dp.callback_query_handler(text='yes')
async def yes(call: types.CallbackQuery):
    keyboard = types.ReplyKeyboardRemove()
    for i in range(5, 0, -1):
        await call.message.edit_text(str(i))
        sleep(1)
    f = open("exercises.txt", 'r', encoding='utf8')
    data = f.readlines()
    f.close()
    for i in exercises:
        await call.message.edit_text(f'–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {i}\n{data[exercises.index(i)]}')
        sleep(30)
    await call.answer()


@dp.callback_query_handler(text='stop')
async def countdown(call: types.CallbackQuery):
    if call.from_user.id == 1212339097 or call.from_user.id == 1300485082:
        await call.message.edit_text('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
        await bot.answer_callback_query(call.id,
                                        text='–ë–æ—Ç –±—ã–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!'
                                             ' –î–∞–Ω–Ω–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.',
                                        show_alert=True)
        data = cur.execute(f"SELECT chat_id FROM users WHERE completion_notification='True'"
                           ).fetchall()
        for i in data:
            await bot.send_message(*i, f'–ë–æ—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏–∑–≤–µ–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞üòî')
        exit(0)

    else:
        await call.message.edit_text('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!')


@dp.callback_query_handler(text='back')
async def countdown(call: types.CallbackQuery):
    user_index = user_data[call.from_user.id]
    try:
        await call.message.edit_text(f'–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {exercises[user_index - 1]}', reply_markup=get_keyboard())
        user_data[call.from_user.id] = user_index - 1
    except IndexError:
        await call.message.edit_text(f'–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {exercises[11]}', reply_markup=get_keyboard())
        user_data[call.from_user.id] = 11
    await call.answer()


@dp.callback_query_handler(text='next')
async def callbacks_next(call: types.CallbackQuery):
    user_index = user_data[call.from_user.id]
    try:
        await call.message.edit_text(f'–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {exercises[user_index + 1]}', reply_markup=get_keyboard())
        user_data[call.from_user.id] = user_index + 1
    except IndexError:
        await call.message.edit_text(f'–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {exercises[0]}', reply_markup=get_keyboard())
        user_data[call.from_user.id] = 0
    await call.answer()


@dp.callback_query_handler(text='confirm')
async def callbacks_confirm(call: types.CallbackQuery):
    user_index = user_data[call.from_user.id]
    f = open("exercises.txt", 'r', encoding='utf8')
    data = f.readlines()
    f.close()
    await call.message.edit_text(f'–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ "{exercises[user_index]}"\n{data[user_index]}')
    await call.answer()


@dp.message_handler()
async def message_send(message: types.Message):
    pass


executor.start_polling(dp, skip_updates=True)
