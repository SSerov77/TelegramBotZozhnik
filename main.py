import os
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

from config import TOKEN
from bot_fiels import keyboard_markup as kb
from bot_fiels.food import Food, Recepts

from data import db_session
from data.users import User

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

help_text = '–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?' \
            '\n‚ùó–ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É \start' \
            '\n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –Ω—É–∂–Ω—ã—Ö —Ç–µ–±–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤' \
            '\n‚úÖ–†–∞–∑–¥–µ–ª "–í–∞—à–µ –ø–∏—Ç–∞–Ω–∏–µ" –ø–æ–¥—Å–∫–∞–∂–µ—Ç —Ç–µ–±–µ –Ω—É–∂–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω —á—Ç–æ–±—ã –ø–æ—Ö—É–¥–µ—Ç—å, –Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –µ—ë' \
            '\n‚úÖ–†–∞–∑–¥–µ–ª "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏" –ø–æ–¥—Å–∫–∞–∂–µ—Ç —Ç–µ–±–µ –±—ã—Å—Ç—Ä—ã–µ –∏ —É–¥–æ–±–Ω—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å' \
            '\n‚úÖ–í —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è" —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–∏ —É—Å–ø–µ—Ö–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–µ–±—è' \
            '\n‚úÖ–í —Ä–∞–∑–¥–µ–ª–µ "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –∏ –±–æ—Ç —Ç–µ–±–µ —ç—Ç–æ –ø—Ä–∏—à–ª—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ ,—á—Ç–æ–±—ã —Ç—ã –Ω–µ –∑–∞–±—ã–ª –æ–± —ç—Ç–æ–º' \
            '\nüîÖ–ù–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–≥–¥–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏' \
            '\n‚úÖ–í "–î—Ä—É–≥–æ–µ" —Ç—ã –Ω–∞–π–¥–µ—à—å –µ—â–µ –º–Ω–æ–≥–æ —á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ:)'

user_data = {}
menu = []
dish = ''
total_id_users = []
user = User()


def main(id_user, name):
    db_sess = db_session.create_session()
    print(1)
    for i in db_sess.query(User).all():
        i = i.id_user
        if i not in total_id_users:
            total_id_users.append(i)
        if id_user not in total_id_users:
            print(total_id_users)
            user.name = name
            user.id_user = id_user
            db_sess.add(user)
            total_id_users.append(i)
            db_sess.commit()


def get_keyboard():
    buttons = [
        types.InlineKeyboardButton(text="<", callback_data="backk"),
        types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="finish"),
        types.InlineKeyboardButton(text=">", callback_data="upp")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    keyboard.add(*buttons)
    return keyboard


@dp.message_handler(text=['–°—É–ø—ã', '–°–∞–ª–∞—Ç—ã', '–ì–æ—Ä—è—á–µ–µ', '–†—ã–±–∞', '–ù–∞–ø–∏—Ç–∫–∏'])
async def other_kb(message: types.Message):
    global menu
    global dish
    menu = Food(str(message.text)).result
    dish = str(message.text)
    user_data[message.from_user.id] = 0
    await bot.send_message(message.from_user.id, f'–ë–ª—é–¥–æ: {menu[user_data[message.from_user.id]]}',
                           reply_markup=get_keyboard())


@dp.callback_query_handler(text='backk')
async def countdown(call: types.CallbackQuery):
    global menu
    user_index = user_data[call.from_user.id]
    try:
        await call.message.edit_text(f'–ë–ª—é–¥–æ: {menu[user_index - 1]}', reply_markup=get_keyboard())
        user_data[call.from_user.id] = user_index - 1
    except IndexError:
        await call.message.edit_text(f'–ë–ª—é–¥–æ: {menu[len(menu)]}', reply_markup=get_keyboard())
        user_data[call.from_user.id] = len(menu)
    await call.answer()


@dp.callback_query_handler(text='finish')
async def callbacks_confirm(call: types.CallbackQuery):
    global menu
    global dish
    user_index = user_data[call.from_user.id]
    result = Recepts(int(user_index), dish).result_dish
    await call.message.edit_text(f'{menu[user_index]}: '
                                 f'\n{result}')
    await call.answer()


@dp.callback_query_handler(text='upp')
async def countdown(call: types.CallbackQuery):
    global menu
    user_index = user_data[call.from_user.id]
    try:
        await call.message.edit_text(f'–ë–ª—é–¥–æ: {menu[user_index + 1]}', reply_markup=get_keyboard())
        user_data[call.from_user.id] = user_index + 1
    except IndexError:
        await call.message.edit_text(f'–ë–ª—é–¥–æ: {menu[0]}', reply_markup=get_keyboard())
        user_data[call.from_user.id] = 0
    await call.answer()


@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    await bot.send_message(message.from_user.id,
                           f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –Ω–∞–ø–∏—à–∏ \help',
                           reply_markup=kb.mainMenu)
    main(message.from_user.id, message.from_user.first_name)


@dp.message_handler(commands=['help'])
async def command_start(message: types.Message):
    await bot.send_message(message.from_user.id, help_text, reply_markup=kb.mainMenu)


@dp.message_handler(text=['–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
async def nutrition_kb(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.mainMenu)


@dp.message_handler(text=['–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ'])
async def main_menu_kb(message: types.Message):
    await bot.send_message(message.from_user.id, '–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ', reply_markup=kb.purposeMenu)


@dp.message_handler(text=['–ù–∞–∑–∞–¥ –≤ "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ"'])
async def nutrition_kb(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—ã –≤–µ—Ä–Ω—É—Å—å –≤ "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ"',
                           reply_markup=kb.purposeMenu)


@dp.message_handler(text=['–î—Ä—É–≥–æ–µ'])
async def other_kb(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ "–î—Ä—É–≥–æ–µ"', reply_markup=kb.otherMenu)


@dp.message_handler(text=['–ù–∞–∑–∞–¥ –≤ "–î—Ä—É–≥–æ–µ"'])
async def back_to_other_kb(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ "–î—Ä—É–≥–æ–µ"', reply_markup=kb.otherMenu)


@dp.message_handler(text=['–ü–æ–≥–æ–¥–∞'])
async def weather_kb(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ "–ü–æ–≥–æ–¥–∞"', reply_markup=kb.weatherMenu)


@dp.message_handler(text=['–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'])
async def back_to_other_kb(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ "–ü–æ–≥–æ–¥–∞"', reply_markup=kb.notifyMenu)


@dp.message_handler()
async def message_send(message: types.Message):
    pass


executor.start_polling(dp, skip_updates=False)
